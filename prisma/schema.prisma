// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String     @id @default(cuid())
  name            String?
  email           String?    @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  recipes         Recipe[]
  favoritsRecipes Favorite[]
  Rating          Rating[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Recipe {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  title         String
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  ingredients   Ingredient[]
  description   String
  yield         Int
  directions    String
  ratings       Rating[]
  averageRating Float        @default(0.0)
  image         String
  favoritedBy   Favorite[]
  recipeTags    RecipeTag[]

  @@index([userId, averageRating, createdAt]) // Index for Query 1, 3 and 4
}

model Ingredient {
  id               String          @id @default(cuid())
  ingredientName   IngredientsName @relation(fields: [ingredientNameId], references: [id])
  ingredientNameId String
  unit             String
  amount           Float
  recipeID         String
  recipe           Recipe          @relation(fields: [recipeID], references: [id])

  @@index([recipeID]) // Index for Query 6 and 8
}

model IngredientsName {
  id          String       @id @default(cuid())
  name        String       @unique
  //to keep track on popular one's and "kill" dead ones
  count       Int
  ingredients Ingredient[]

  @@index([name, count]) // Index for Query 14 and 15
}

//relation of many to many, intermidiat table to handle the user - recipe rating matching
model Rating {
  user     User    @relation(fields: [userID], references: [id])
  userID   String
  stars    Int
  recipeID String
  recipe   Recipe  @relation(fields: [recipeID], references: [id])
  comment  String?

  @@id([userID, recipeID]) // Unique constraint for Query 17
  @@index([userID, recipeID]) // Index for Query 19 and 20
}

//relation of many to many, intermidiat table to handle the user - recipe favorit matching
model Favorite {
  user     User   @relation(fields: [userID], references: [id])
  userID   String
  recipe   Recipe @relation(fields: [recipeID], references: [id])
  recipeID String

  @@id([userID, recipeID]) // Unique constraint for Query 5
  @@index([userID, recipeID]) // Index for Query 5
  @@map("Favorits")
}

model RecipeTag {
  tag      Tag    @relation(fields: [tagID], references: [id])
  tagID    String
  recipe   Recipe @relation(fields: [recipeID], references: [id])
  recipeID String

  @@id([tagID, recipeID]) // Unique constraint for Query 10
  @@index([tagID, recipeID]) // Index for Query 10
  @@map("RecipeTag")
}

model Tag {
  id      String      @id @default(cuid())
  name    String      @unique
  recipes RecipeTag[]
  //to keep track on popular one's and "kill" dead ones
  count   Int

  @@index([name, count]) // Index for Query 3, 4, and 14
}
