// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String     @id @default(cuid())
  name            String?
  email           String?    @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  recipes         Recipe[]
  ratings         Rating[]
  favoritsRecipes Favorits[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Recipe {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  title       String
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  ingrediants Ingrediants[]
  description String
  yield       Int
  directions  String
  ratings     Rating[]
  image       String
  favorits    Favorits[]
  tags        RecipeTags[]

  //we want to show the user he's recipes fast
  @@index([userId])
}

model Ingrediants {
  id               String         @id @default(cuid())
  ingrediantName   IngrediantName @relation(fields: [ingrediantNameId], references: [id])
  ingrediantNameId String
  amount           Float
  recipeID         String
  recipe           Recipe         @relation(fields: [recipeID], references: [id])

  //find fast the recipe ingrediants
  @@index([recipeID])
}

model IngrediantName {
  id          String        @id @default(cuid())
  name        String        @unique
  //we want to count how many recipes uses this ingrediants, so when non is using we will not sugest it
  count       Int
  Ingrediants Ingrediants[]

  //we want to search fast for ingrediants names, used for typeahead, and overall recipe searching
  @@index([name])
}

//relation of many to many, intermidiat table to handle the user - recipe rating matching
model Rating {
  user     User    @relation(fields: [userID], references: [id])
  userID   String
  stars    Int
  recipeID String
  recipe   Recipe  @relation(fields: [recipeID], references: [id])
  comment  String?

  @@id([userID, recipeID])
  //we want to allow fetching fast the recipe rating and allow a user to see fast if he rated this recipe
  @@index([userID, recipeID])
}

//relation of many to many, intermidiat table to handle the user - recipe favorit matching
model Favorits {
  user     User   @relation(fields: [userID], references: [id])
  userID   String
  recipe   Recipe @relation(fields: [recipeID], references: [id])
  recipeID String

  @@id([userID, recipeID])
  @@index([userID, recipeID])
}

model RecipeTags {
  tag      Tag    @relation(fields: [tagID], references: [id])
  tagID    String
  recipe   Recipe @relation(fields: [recipeID], references: [id])
  recipeID String

  @@id([tagID, recipeID])
  @@index([tagID, recipeID])
}

model Tag {
  id      String       @id @default(cuid())
  name    String       @unique
  recipes RecipeTags[]
}
