// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  recipes          Recipe[]
  ingrediantsNames IngredientsName[]
  tags             Tag[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Recipe {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  ingredients Ingredient[]
  description String
  yield       Int
  directions  String
  image       String
  recipeTags  RecipeTag[]
}

model Ingredient {
  id               String          @id @default(cuid())
  ingredientName   IngredientsName @relation(fields: [ingredientNameId], references: [id])
  ingredientNameId String
  unit             String
  amount           Float
  recipe           Recipe          @relation(fields: [recipeID], references: [id])
  recipeID         String
}

model IngredientsName {
  id          String       @id @default(cuid())
  name        String       @unique
  //to keep track on popular one's and "kill" dead ones
  count       Int
  ingredients Ingredient[]
  user        User         @relation(fields: [userID], references: [id])
  userID      String
}

model RecipeTag {
  tag      Tag    @relation(fields: [tagID], references: [id])
  tagID    String
  recipe   Recipe @relation(fields: [recipeID], references: [id])
  recipeID String

  @@id([tagID, recipeID]) // Unique constraint for Query 10
}

model Tag {
  id      String      @id @default(cuid())
  name    String      @unique
  recipes RecipeTag[]
  //to keep track on popular one's and "kill" dead ones
  count   Int
  user    User        @relation(fields: [userID], references: [id])
  userID  String
}
